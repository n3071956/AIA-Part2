<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1481683411736">{:repl-history {:ide [], :local [&quot;(planner world '(on prisoner c4) planner-operations-prisoner)&quot; &quot;(planner world '(on prisoner ?corridor) planner-operations-prisoner)&quot; &quot;(planner world '(on prisoner ?target) planner-operations-prisoner)&quot; &quot;;(planner world '(on priosner j2) planner-operations-prisoner)&quot; &quot;(planner world '(on priosner j2) planner-operations-prisoner)&quot; &quot;(planner world '(c is unlocked) planner-operations-prisoner)&quot; &quot;(planner world '(on prisoner ?p1) planner-operations-prisoner)&quot; &quot;(planner world '(on prisoner ?p2) planner-operations-prisoner)&quot; &quot;(ops-search world '(on prisoner j1) operations-prisoner)&quot; &quot;(planner world '(on prisoner j8) planner-operations-prisoner)&quot; &quot;(load  \&quot;imports\&quot;)&quot; &quot;(planner world '((escaped prisoner true)) planner-operations-prisoner)&quot; &quot;(planner world '(on prisoner j6) planner-operations-prisoner)&quot; &quot;(planner world '(on prisoner ?j4) planner-operations-prisoner)&quot; &quot;(planner world '(on prisoner j7) planner-operations-prisoner)&quot; &quot;(ops-search world '(escaped prisoner true) operations-prisoner)&quot; &quot;(shrepl)&quot; &quot;shrepl&quot; &quot;(planner world '(has prisoner key) planner-operations-prisoner)&quot; &quot;(planner world '(on prisoner j1) planner-operations-prisoner)&quot; &quot;(planner world '(on prisoner j5) planner-operations-prisoner)&quot; &quot;(planner world '(on prisoner j4) planner-operations-prisoner)&quot; &quot;(planner world '(on prisoner j3) planner-operations-prisoner)&quot; &quot;(planner world2 '(on prisoner j5) planner-operations-prisoner)&quot; &quot;(planner world '(on prisoner exit) planner-operations-prisoner)&quot; &quot;(planner world '(on prisoner c2) planner-operations-prisoner)&quot; &quot;(planner world '(on prisoner c1) planner-operations-prisoner)&quot; &quot;(planner world '(on prisoner c3) planner-operations-prisoner)&quot; &quot;(planner world '(escaped prisoner true) planner-operations-prisoner)&quot; &quot;\n(planner world '(on prisoner j2) planner-operations-prisoner)&quot; &quot;(planner world '(on prisoner j2) planner-operations-prisoner)&quot; &quot;(nlogo-send meow)&quot; &quot;(nlogo-send exec.unlock-cell)&quot; &quot;(nlogo-send (str 'exec.unlock-cell) \&quot;exec.unlock-cell\&quot;)&quot; &quot;(str 'exec.unlock-cell)&quot; &quot;(set shrdlu-comms 2222)&quot; &quot;(set-shrdlu-comms 2222)&quot; &quot;(startup-server 2222)&quot; &quot;(socket-write 2222 \&quot;test\&quot;)&quot; &quot;(socket-write (startup-server 2222) \&quot;test\&quot;)&quot; &quot;#&quot; &quot;(nlogo-send \&quot;meow\&quot;)&quot; &quot;(ops-search world '((escaped prisoner true)) operations-prisoner) :cmds)&quot; &quot;(ops-search world '((escaped prisoner true)) operations-prisoner)&quot; &quot;(nlogo-translate-cmd (get (ops-search world '((escaped prisoner true)) operations-prisoner) :cmds))&quot; &quot;(nlogo-translate-cmd exit-prison)&quot; &quot;(nlogo-translate-cmd [unlock-cell])&quot; &quot;(nlogo-translate-cmd '(get (ops-search world '((escaped prisoner true)) operations-prisoner) :cmds))&quot; &quot;'(get (ops-search world '((escaped prisoner true)) operations-prisoner) :cmds))&quot; &quot;(nlogo-test-exec '(get (ops-search world '((escaped prisoner true)) operations-prisoner) :cmds))&quot; &quot;(nlogo-test-exec (get (ops-search world '((escaped prisoner true)) operations-prisoner) :cmds))&quot; &quot;(nlogo-send-exec (get (ops-search world '((escaped prisoner true)) operations-prisoner) :cmds))&quot; &quot;(let [cmd-str (nlogo-translate-cmd (get (ops-search world '((escaped prisoner true)) operations-prisoner) :cmds))])&quot; &quot;(get (ops-search world '((escaped prisoner true)) operations-prisoner) :cmds)&quot; &quot;'(get (ops-search world '((escaped prisoner true)) operations-prisoner) :cmds)&quot; &quot;((get (ops-search world '((escaped prisoner true)) operations-prisoner) :cmds))&quot; &quot;(nlogo-translate-cmd ([unlock-cell]))&quot; &quot;(nlogo-translate-cmd ('[unlock-cell]))&quot; &quot;(nlogo-translate-cmd '([unlock-cell]))&quot; &quot;(nlogo-send (str 'exec.unlock-cell))&quot; &quot;'((get (ops-search world '((escaped prisoner true)) operations-prisoner) :cmds))&quot; &quot;\n((get (ops-search world '((escaped prisoner true)) operations-prisoner) :cmds))&quot; &quot;(nlogo-send-exec '(get (ops-search world '((escaped prisoner true)) operations-prisoner) :cmds))&quot; &quot;(ops-search world (quote ((escaped prisoner true))) operations-prisoner)&quot; &quot;(get (ops-search world (quote ((escaped prisoner true))) operations-prisoner) :cmds)&quot; &quot;(nlogo-translate-cmd '[unlock-cell])&quot; &quot;(apply nlogo-translate-cmd (ops-search world (quote ((escaped prisoner true))) operations-prisoner))&quot; &quot;(apply nlogo-translate-cmd (get (ops-search world (quote ((escaped prisoner true))) operations-prisoner) :cmds))&quot; &quot;(map nlogo-send '(map nlogo-translate-cmd (get (ops-search world (quote ((escaped prisoner true))) operations-prisoner) :cmds)))&quot; &quot;(map nlogo-translate-cmd (get (ops-search world (quote ((escaped prisoner true))) operations-prisoner) :cmds))&quot; &quot;(nlogo-send \&quot;exec.unlock-cell\&quot;)&quot; &quot;(map nlogo-send-exec (map nlogo-translate-cmd (get (ops-search world (quote ((escaped prisoner true))) operations-prisoner) :cmds)))&quot; &quot;(load \&quot;imports\&quot;)&quot; &quot;(load \&quot;imports\&quot;)                                            ;&quot; &quot;(map nlogo-send (map nlogo-translate-cmd (get (ops-search world (quote ((escaped prisoner true))) operations-prisoner) :cmds)))&quot; &quot;(load \&quot;imports\&quot;)                                            &quot; &quot;(startup 2222)&quot;], :remote []}}</component>
</project>